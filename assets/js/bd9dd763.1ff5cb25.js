"use strict";(self.webpackChunklemon_script_documentation=self.webpackChunklemon_script_documentation||[]).push([[282],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return y}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),y=r,b=m["".concat(s,".").concat(y)]||m[y]||u[y]||o;return n?a.createElement(b,i(i({ref:t},p),{},{components:n})):a.createElement(b,i({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1968:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={},s="Variable Types",c={unversionedId:"documentation/static-types/variable-types",id:"documentation/static-types/variable-types",isDocsHomePage:!1,title:"Variable Types",description:"In LemonScript, you can also set a type for a variable. Setting a type is good because it won't allow for type errors anywhere in your program and often prevents variables from changing types, which further defends against unintended errors. Setting a type for a variable means that the variable's type can not be changed. To set a type of a variable, you can use this syntax when declaring it:",source:"@site/docs/documentation/static-types/variable-types.md",sourceDirName:"documentation/static-types",slug:"/documentation/static-types/variable-types",permalink:"/LemonScript/docs/documentation/static-types/variable-types",editUrl:"https://github.com/PlebusSupremus1234/LemonScript/website/docs/documentation/static-types/variable-types.md",version:"current",frontMatter:{},sidebar:"documentation",previous:{title:"Functions",permalink:"/LemonScript/docs/documentation/functions"},next:{title:"Function Types",permalink:"/LemonScript/docs/documentation/static-types/function-types"}},p=[],u={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"variable-types"},"Variable Types"),(0,o.kt)("p",null,"In LemonScript, you can also set a type for a variable. Setting a type is good because it won't allow for type errors anywhere in your program and often prevents variables from changing types, which further defends against unintended errors. Setting a type for a variable means that the variable's type can not be changed. To set a type of a variable, you can use this syntax when declaring it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"[var | const] [variable name]: [type] = [value]\n")),(0,o.kt)("p",null,"The variable name has to start with an alphabetical letter or an underscore, then can be any character. It cannot contain spaces."),(0,o.kt)("p",null,"The value can be an expression, value, or even another variable. For example a number or a string. Without the value, the variable's value is automatically set to null."),(0,o.kt)("p",null,"For the type, it can be either ",(0,o.kt)("inlineCode",{parentName:"p"},"Any"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Number"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"String"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Boolean")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Null"),". If there is no type passed in, the type is automatically set to ",(0,o.kt)("inlineCode",{parentName:"p"},"Any"),". This allows it to change to any value. You can still use this syntax with ",(0,o.kt)("inlineCode",{parentName:"p"},"const"),", but it is not needed as the variable's value cannot be changed. "),(0,o.kt)("p",null,"Here is an example demonstrating types of a variable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'var num: Number = 5\n\nprint(num) # 5\n\nnum = "string" # Error\n')),(0,o.kt)("p",null,"When assigning a string to the num variable, it will error because num's type is a variable. "),(0,o.kt)("p",null,"You can also set multiple types to a variable by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"|")," symbol with the following syntax:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var [variable name]: [type1] | [type2] ... = [value]\n")),(0,o.kt)("p",null,"If we use the example above, but change its type to ",(0,o.kt)("inlineCode",{parentName:"p"},"Number | String"),", the code will not error anymore, because the variable's value can be both a string or a number. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'var num: Number | String = 5\n\nprint(num) # 5\n\nnum = "string" # No error\n')))}m.isMDXComponent=!0}}]);