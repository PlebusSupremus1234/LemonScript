"use strict";(self.webpackChunklemon_script_documentation=self.webpackChunklemon_script_documentation||[]).push([[634],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=i,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8178:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],l={},s="String",c={unversionedId:"documentation/primitives/string",id:"documentation/primitives/string",isDocsHomePage:!1,title:"String",description:"A string in LemonScript is a set of characters grouped together. This document will be describing a string's static properties and methods.",source:"@site/docs/documentation/primitives/string.md",sourceDirName:"documentation/primitives",slug:"/documentation/primitives/string",permalink:"/LemonScript/docs/documentation/primitives/string",editUrl:"https://github.com/PlebusSupremus1234/LemonScript/website/docs/documentation/primitives/string.md",version:"current",frontMatter:{},sidebar:"documentation",previous:{title:"Variables",permalink:"/LemonScript/docs/documentation/variables"},next:{title:"If/Else Statements",permalink:"/LemonScript/docs/documentation/if-else-statements"}},p=[{value:"Static Properties",id:"static-properties",children:[]},{value:"Methods",id:"methods",children:[]}],m={toc:p};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"string"},"String"),(0,o.kt)("p",null,"A string in LemonScript is a set of characters grouped together. This document will be describing a string's static properties and methods. "),(0,o.kt)("u",null,"Note: Indexes in LemonScript start from 0, so the first character of a string will have index 0, and the second 1, etc"),(0,o.kt)("h2",{id:"static-properties"},"Static Properties"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"length")," - The length property describes how many characters are in the string. For example, ",(0,o.kt)("inlineCode",{parentName:"li"},'"hello".length')," is 5.")),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"lower()")," - The lower method returns the string with all lowercase characters. For example, ",(0,o.kt)("inlineCode",{parentName:"li"},'"Hello".lower()')," is ",(0,o.kt)("inlineCode",{parentName:"li"},'"hello"'),". "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"upper()")," - The upper method returns the string with all uppercase characters. For example, ",(0,o.kt)("inlineCode",{parentName:"li"},'"hello".upper()')," is ",(0,o.kt)("inlineCode",{parentName:"li"},'"HELLO"'),". "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"trim(<character>)")," - The trim method returns the string with all leading and trailing whitespace removed. If a character is specified, it will remove all leading and trailing chracters that match the character. For example, ",(0,o.kt)("inlineCode",{parentName:"li"},'"   hello  ".trim()')," is ",(0,o.kt)("inlineCode",{parentName:"li"},'"hello"'),", and ",(0,o.kt)("inlineCode",{parentName:"li"},'"....hmm..".trim(".")')," is ",(0,o.kt)("inlineCode",{parentName:"li"},'"hmm"'),". "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"index([text])")," - The index method returns the index of the first occurrence of the specified text. If no index is found, it returns null. For example, ",(0,o.kt)("inlineCode",{parentName:"li"},'"hello world".index("hello")')," is 0, and ",(0,o.kt)("inlineCode",{parentName:"li"},'"hello world".index("t")')," is null. "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"replace([text], [replacement])")," - The replace method replaces all occurrences of the specified text with the specified replacement. For example, ",(0,o.kt)("inlineCode",{parentName:"li"},'"hello world".replace("hello", "hi")')," is ",(0,o.kt)("inlineCode",{parentName:"li"},'"hi world"'),". "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"substr([min], <max>)")," - The substring method returns a substring of the string. The min value is the starting index for the chopped string (inclusive), and the max index is the ending index for the substring string (exclusive). If no max index is specified, the substring will be from the min index to the end of the string. For example, ",(0,o.kt)("inlineCode",{parentName:"li"},'"hello world".substr(0, 5)')," is ",(0,o.kt)("inlineCode",{parentName:"li"},'"hello"'),", and ",(0,o.kt)("inlineCode",{parentName:"li"},'"hello world".substr(6)')," is ",(0,o.kt)("inlineCode",{parentName:"li"},'"world"'),". You can also use negative indices for the min and max values. A negative index will start from the end of the string. For example, ",(0,o.kt)("inlineCode",{parentName:"li"},'"hello world".substr(-5)')," is ",(0,o.kt)("inlineCode",{parentName:"li"},'"world"'),", and ",(0,o.kt)("inlineCode",{parentName:"li"},'"hello world".substr(-10, -2)')," is ",(0,o.kt)("inlineCode",{parentName:"li"},'"ello wor"'),".")))}d.isMDXComponent=!0}}]);