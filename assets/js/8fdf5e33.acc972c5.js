"use strict";(self.webpackChunklemon_script_documentation=self.webpackChunklemon_script_documentation||[]).push([[2969],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(t),f=r,m=d["".concat(c,".").concat(f)]||d[f]||u[f]||i;return t?a.createElement(m,s(s({ref:n},p),{},{components:t})):a.createElement(m,s({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=d;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8880:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),s=["components"],o={},c="Classes",l={unversionedId:"documentation/classes",id:"documentation/classes",isDocsHomePage:!1,title:"Classes",description:"A class is an object that has properties and methods (its own functions). Here is the syntax for creating a class:",source:"@site/docs/documentation/classes.md",sourceDirName:"documentation",slug:"/documentation/classes",permalink:"/LemonScript/docs/documentation/classes",editUrl:"https://github.com/PlebusSupremus1234/LemonScript/docs/documentation/classes.md",version:"current",frontMatter:{},sidebar:"documentation",previous:{title:"Array Types",permalink:"/LemonScript/docs/documentation/static-types/array-types"},next:{title:"Subclasses",permalink:"/LemonScript/docs/documentation/subclasses"}},p=[],u={toc:p};function d(e){var n=e.components,t=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"classes"},"Classes"),(0,i.kt)("p",null,"A class is an ",(0,i.kt)("inlineCode",{parentName:"p"},"object")," that has properties and methods (its own functions). Here is the syntax for creating a class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"class [class_name] {\n    init([args]) { [code] } # Optional\n\n    [methods]\n}\n")),(0,i.kt)("p",null,"Firstly, you can declare the class name to an valid indentifier/variable name. Then, if you want, you can add a ",(0,i.kt)("inlineCode",{parentName:"p"},"init")," function. This function will be called when the class is created. It's useful for assigning properties to the class. For example, here is a class example using all of those concepts:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"class Rectangle {\n    init(x, y, width, height) {\n        self.x = x\n        self.y = y\n        self.width = width\n        self.height = height\n    }\n\n    getArea() {\n        return self.width * self.height\n    }\n}\n\nvar rectangle1 = Rectangle(50, 20, 100, 120)\nprint(rectangle1.getArea()) # 12000\n")),(0,i.kt)("p",null,"The self is a variable that is avaliable to any function inside the class. You can assign properties to it. Lets dive into how thise code works. Firstly, this class has an ",(0,i.kt)("inlineCode",{parentName:"p"},"init")," function. The ",(0,i.kt)("inlineCode",{parentName:"p"},"init")," function also has arguments. This means that when declaring a variable to this class, you need to pass in the 4 arguments. As you can see, it is done when declaring the ",(0,i.kt)("inlineCode",{parentName:"p"},"rectangle1")," variable. Then, the ",(0,i.kt)("inlineCode",{parentName:"p"},"init")," function goes and sets the ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"y"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"width"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"height")," properties. After that, theres a ",(0,i.kt)("inlineCode",{parentName:"p"},"getArea")," method, which returns the ",(0,i.kt)("inlineCode",{parentName:"p"},"width")," * ",(0,i.kt)("inlineCode",{parentName:"p"},"height"),"."),(0,i.kt)("p",null,"The init function isn't the only place where you can set and change the self variable. You can also actually run the init function again. Heres an example showing that:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'class Cake {\n    init() {\n        self.flavor = "Chocolate"\n    }\n\n    taste() {\n        print("The " + self.flavor + " cake is delicious!")\n\n        self.flavor = "Red Velvet" # Setting flavor to Red Velvet\n        print("The " + self.flavor + " cake is delicious!")\n\n        self.init() # Resetting the flavor by rerunning the init func\n        print("The " + self.flavor + " cake is delicious!")\n    }\n}\n\nvar cake = Cake()\ncake.taste()\n')))}d.isMDXComponent=!0}}]);