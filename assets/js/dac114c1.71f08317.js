"use strict";(self.webpackChunklemon_script_documentation=self.webpackChunklemon_script_documentation||[]).push([[5633],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=p(n),m=o,v=f["".concat(c,".").concat(m)]||f[m]||u[m]||a;return n?r.createElement(v,i(i({ref:t},l),{},{components:n})):r.createElement(v,i({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4655:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return l},default:function(){return f}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={},c="Reverse Polish Notation",p={unversionedId:"examples/arrays/reverse-polish-notation",id:"examples/arrays/reverse-polish-notation",isDocsHomePage:!1,title:"Reverse Polish Notation",description:"`js",source:"@site/docs/examples/arrays/reverse-polish-notation.md",sourceDirName:"examples/arrays",slug:"/examples/arrays/reverse-polish-notation",permalink:"/LemonScript/docs/examples/arrays/reverse-polish-notation",editUrl:"https://github.com/PlebusSupremus1234/LemonScript/website/docs/examples/arrays/reverse-polish-notation.md",version:"current",frontMatter:{},sidebar:"examples",previous:{title:"Fibonacci",permalink:"/LemonScript/docs/examples/arrays/fibonacci"}},l=[],u={toc:l};function f(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"reverse-polish-notation"},"Reverse Polish Notation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import math\n\nconst operations = ["+", "-", "*", "/"]\n\nfunc evalReversePolishNotation(input: Array<String>): Number {\n    var stack = []\n\n    for (var i = 0; i < input.length; i += 1) {\n        const value = input.get(i)\n\n        if (!operations.contains(value)) stack.push(value.number())\n        else {\n            const b = stack.pop()\n            const a = stack.pop()\n\n            if (value == "+") stack.push(a + b)\n            elif (value == "-") stack.push(a - b)\n            elif (value == "*") stack.push(a * b)\n            else stack.push(math.floor(a / b))\n        }\n    }\n    \n    return stack.get(0)\n}\n\nprint(evalReversePolishNotation(["2","1","+","3","*"])) # 9\nprint(evalReversePolishNotation(["4","13","5","/","+"])) # 6\n')),(0,a.kt)("p",null,"This function evaluates a reverse polish notation expression. It takes an input of an array with type string, and outputs the evaluated expression as a number."))}f.isMDXComponent=!0}}]);