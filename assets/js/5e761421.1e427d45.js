"use strict";(self.webpackChunklemon_script_documentation=self.webpackChunklemon_script_documentation||[]).push([[4210],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,h=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4632:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={},p="Arrays",s={unversionedId:"documentation/arrays",id:"documentation/arrays",isDocsHomePage:!1,title:"Arrays",description:"An array is a special variable, which can hold more than one value at a time. It is essentially a list that holds multiple values. For example:",source:"@site/docs/documentation/arrays.md",sourceDirName:"documentation",slug:"/documentation/arrays",permalink:"/LemonScript/docs/documentation/arrays",editUrl:"https://github.com/PlebusSupremus1234/LemonScript/website/docs/documentation/arrays.md",version:"current",frontMatter:{},sidebar:"documentation",previous:{title:"Functions",permalink:"/LemonScript/docs/documentation/functions"},next:{title:"Variable Types",permalink:"/LemonScript/docs/documentation/static-types/variable-types"}},u=[{value:"Static Properties",id:"static-properties",children:[]},{value:"Methods",id:"methods",children:[]}],m={toc:u};function c(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"arrays"},"Arrays"),(0,i.kt)("p",null,"An array is a special variable, which can hold more than one value at a time. It is essentially a list that holds multiple values. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var array = [1, 2, 3, 4, 5]\n")),(0,i.kt)("p",null,"Arrays have many many benefits over using a single variable for every value. What if you had hundreds of values? With arrays, you can store all of the values neatly. With arrays, you have much more functionality too, such as iterating over the values. "),(0,i.kt)("p",null,"The syntax for creating an array is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"[var | const] array = [item1, item2, ...]\n")),(0,i.kt)("p",null,"You can also have empty arrays such as ",(0,i.kt)("inlineCode",{parentName:"p"},"[]"),". "),(0,i.kt)("u",null,"Note: indices in LemonScript start from 0, so the first character of a string will have index 0, and the second 1, etc"),(0,i.kt)("h2",{id:"static-properties"},"Static Properties"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"length")," - The length property describes how many elements are in the array. For example, ",(0,i.kt)("inlineCode",{parentName:"li"},"[1, 3, 2, 5, 6.6].length")," is 5.")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"copy()")," - Creates a duplicate and a new instance of the array. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"concat(array)")," - Concats the array with another specified array. For example ",(0,i.kt)("inlineCode",{parentName:"p"},"[1, 2, 3].concat([4, 5, 6])")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"[1, 2, 3, 4, 5, 6]"),". ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"contains(value)")," - Returns a boolean indicating whether the specified value is in the array. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"[true, true, false, 5].contains(5)")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"get(index)")," - Returns the value at the given index. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},'["Hello", "world"].get(1)')," returns ",(0,i.kt)("inlineCode",{parentName:"p"},'"world"'),". ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"index(value)")," - Returns the index of the first occurrence of the given value in the array. If no occurrences are found, then the method returns ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),". For example, ",(0,i.kt)("inlineCode",{parentName:"p"},'["Hello", "world"].index("world")')," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),". ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"join(joiner)")," - Returns a string with all the elements joined together using a specified string. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},'["I", "am", "Bob"].join(" ")')," returns ",(0,i.kt)("inlineCode",{parentName:"p"},'"I am Bob"'),". ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"pop()")," - The pop method removes the last element from an array and returns it. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},'["red", "blue", "green", "yellow"].pop()')," returns ",(0,i.kt)("inlineCode",{parentName:"p"},'"yellow"'),", and the array becomes ",(0,i.kt)("inlineCode",{parentName:"p"},'["red", "blue", "green"]'),". ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"push(value1<, value2, value3, ...>)")," - The push method pushes all the specified elements to the end of the array. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"[1, 2, 3].push(4)")," changes to array to ",(0,i.kt)("inlineCode",{parentName:"p"},"[1, 2, 3, 4]"),". You can also specify more than one element: ",(0,i.kt)("inlineCode",{parentName:"p"},"[1, 2, 3].push(4, 5, 6)")," becomes ",(0,i.kt)("inlineCode",{parentName:"p"},"[1, 2, 3, 4, 5, 6]"),". ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"remove(value)")," - Removes all occurrences of a given value from the array. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},'["red", "blue", "green", "yellow", "red"].remove("red")')," changes the original array to ",(0,i.kt)("inlineCode",{parentName:"p"},'["blue", "green", "yellow"]'),". ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"reverse()")," - Returns the reverse of the array. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"[1, 2, 3].reverse()")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"[3, 2, 1]"),". ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"set(index, value)")," - Sets a value in the array at the given index to the specified value. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"shuffle()")," - Returns the array but with its elements shuffled and in a random order. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"slice(min<, max>)")," - Returns a new array containing the specified range of elements. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"[1, 2, 3, 4, 5].slice(1, 3)")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"[2, 3]"),". If no max argument it specified, the output will be the sliced array from min to the end of the array. You can also use negative indices to slice from the end of the array. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"[1, 2, 3, 4, 5].slice(1, -2)")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"[2, 3]"),". ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"sort()")," - The sort method sorts the array in ascending order. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"[5, 3, 1, 2].sort()")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"[1, 2, 3, 5]"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},'["1", "2", "11", "a", "c", "b"].sort()')," returns ",(0,i.kt)("inlineCode",{parentName:"p"},'["1", "11", "2", "a", "b", "c"]'),". If there are mixed types in the array, then it'll sort the types, and place them in this order: ",(0,i.kt)("inlineCode",{parentName:"p"},"[numbers, strings, nulls, falses, trues]"),". E.g ",(0,i.kt)("inlineCode",{parentName:"p"},'[1, 3, "b", 2, false, "a", null, true].sort()')," returns ",(0,i.kt)("inlineCode",{parentName:"p"},'[1, 2, 3, "a", "b", null, false, true]'),"."))))}c.isMDXComponent=!0}}]);