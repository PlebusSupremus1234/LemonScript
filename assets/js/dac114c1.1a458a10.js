"use strict";(self.webpackChunklemon_script_documentation=self.webpackChunklemon_script_documentation||[]).push([[5633],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=p(t),m=o,v=f["".concat(c,".").concat(m)]||f[m]||u[m]||a;return t?r.createElement(v,i(i({ref:n},l),{},{components:t})):r.createElement(v,i({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4655:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return l},default:function(){return f}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],s={},c="Reverse Polish Notation",p={unversionedId:"examples/arrays/reverse-polish-notation",id:"examples/arrays/reverse-polish-notation",isDocsHomePage:!1,title:"Reverse Polish Notation",description:"`js",source:"@site/docs/examples/arrays/reverse-polish-notation.md",sourceDirName:"examples/arrays",slug:"/examples/arrays/reverse-polish-notation",permalink:"/LemonScript/docs/examples/arrays/reverse-polish-notation",editUrl:"https://github.com/PlebusSupremus1234/LemonScript/website/docs/examples/arrays/reverse-polish-notation.md",version:"current",frontMatter:{},sidebar:"examples",previous:{title:"Fibonacci",permalink:"/LemonScript/docs/examples/arrays/fibonacci"}},l=[],u={toc:l};function f(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"reverse-polish-notation"},"Reverse Polish Notation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import math\n\nconst operations = ["+", "-", "*", "/"]\n\nfunc evalReversePolishNotation(input: Array<String>): Number {\n    var stack = []\n\n    for (var i = 0; i < input.length; i += 1) {\n        const value = input.get(i)\n\n        if (!operations.contains(value)) stack.push(value.number())\n        else {\n            const b = stack.pop()\n            const a = stack.pop()\n\n            if (value == "+") stack.push(a + b)\n            else {\n                if (value == "-") stack.push(a - b)\n                else {\n                    if (value == "*") stack.push(a * b)\n                    else stack.push(math.floor(a / b))\n                }\n            }\n        }\n    }\n    \n    return stack.get(0)\n}\n\nprint(evalReversePolishNotation(["2","1","+","3","*"])) # 9\nprint(evalReversePolishNotation(["4","13","5","/","+"])) # 6\n')),(0,a.kt)("p",null,"This function evaluates a reverse polish notation expression. It takes an input of an array with type string, and outputs the evaluated expression as a number."))}f.isMDXComponent=!0}}]);