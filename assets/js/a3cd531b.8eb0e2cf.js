"use strict";(self.webpackChunklemon_script_documentation=self.webpackChunklemon_script_documentation||[]).push([[8344],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return y}});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function a(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var u=r.createContext({}),s=function(t){var e=r.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},p=function(t){var e=s(t.components);return r.createElement(u.Provider,{value:e},t.children)},l={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,u=t.parentName,p=a(t,["components","mdxType","originalType","parentName"]),m=s(n),y=o,f=m["".concat(u,".").concat(y)]||m[y]||l[y]||i;return n?r.createElement(f,c(c({ref:e},p),{},{components:n})):r.createElement(f,c({ref:e},p))}));function y(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,c=new Array(i);c[0]=m;var a={};for(var u in e)hasOwnProperty.call(e,u)&&(a[u]=e[u]);a.originalType=t,a.mdxType="string"==typeof t?t:o,c[1]=a;for(var s=2;s<i;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7074:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return a},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),c=["components"],a={},u="Function Types",s={unversionedId:"documentation/static-types/function-types",id:"documentation/static-types/function-types",isDocsHomePage:!1,title:"Function Types",description:"In LemonScript, functions can have types too. Firstly, lets talk about the function return types. The compiler will throw an error if it recieves a return type that doesn't match the function's return type. You can set the return types to a function like this:",source:"@site/docs/documentation/static-types/function-types.md",sourceDirName:"documentation/static-types",slug:"/documentation/static-types/function-types",permalink:"/LemonScript/docs/documentation/static-types/function-types",editUrl:"https://github.com/PlebusSupremus1234/LemonScript/website/docs/documentation/static-types/function-types.md",version:"current",frontMatter:{},sidebar:"documentation",previous:{title:"Variable Types",permalink:"/LemonScript/docs/documentation/static-types/variable-types"},next:{title:"Array Types",permalink:"/LemonScript/docs/documentation/static-types/array-types"}},p=[],l={toc:p};function m(t){var e=t.components,n=(0,o.Z)(t,c);return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"function-types"},"Function Types"),(0,i.kt)("p",null,"In LemonScript, functions can have types too. Firstly, lets talk about the function return types. The compiler will throw an error if it recieves a return type that doesn't match the function's return type. You can set the return types to a function like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"func [function name]([args]): [type1] | [type2] ... {\n    [code]\n}\n")),(0,i.kt)("p",null,"If no return type is specified, then the return type is automatically set to ",(0,i.kt)("inlineCode",{parentName:"p"},"Any"),", allowing any return type. "),(0,i.kt)("p",null,"You can also set types for the arguments of a function. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'func addNums(num1: Number, num2: Number): Number {\n    return num1 + num2\n}\n\nprint(addNums(1, "two"))\n')),(0,i.kt)("p",null,"This script will error because the second argument passed into the ",(0,i.kt)("inlineCode",{parentName:"p"},"addNums")," function is not a number type, as required in the function args."))}m.isMDXComponent=!0}}]);