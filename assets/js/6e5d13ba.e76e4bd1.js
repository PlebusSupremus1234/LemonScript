"use strict";(self.webpackChunklemon_script_documentation=self.webpackChunklemon_script_documentation||[]).push([[128],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return b}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(n),b=r,d=m["".concat(s,".").concat(b)]||m[b]||p[b]||i;return n?a.createElement(d,o(o({ref:t},u),{},{components:n})):a.createElement(d,o({ref:t},u))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4227:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={},s="Variables",c={unversionedId:"documentation/variables",id:"documentation/variables",isDocsHomePage:!1,title:"Variables",description:"In LemonScript, there are two different types of variables, constant, and mutable. A constant variable, as the name describes, is constant and immutable. So the interpreter will throw an error if you try to change the value. The other type is mutable. This variable's value can be changed. To declare a variable, you can use the var or const keyword with this syntax:",source:"@site/docs/documentation/variables.md",sourceDirName:"documentation",slug:"/documentation/variables",permalink:"/LemonScript/docs/documentation/variables",editUrl:"https://github.com/PlebusSupremus1234/LemonScript/website/docs/documentation/variables.md",version:"current",frontMatter:{},sidebar:"documentation",previous:{title:"Comments",permalink:"/LemonScript/docs/documentation/comments"},next:{title:"String",permalink:"/LemonScript/docs/documentation/primitives/string"}},u=[{value:"Constant variable immutability in more detail",id:"constant-variable-immutability-in-more-detail",children:[]},{value:"Assignment",id:"assignment",children:[]}],p={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"variables"},"Variables"),(0,i.kt)("p",null,"In LemonScript, there are two different types of variables, constant, and mutable. A constant variable, as the name describes, is constant and immutable. So the interpreter will throw an error if you try to change the value. The other type is mutable. This variable's value can be changed. To declare a variable, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"const")," keyword with this syntax:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"[var | const] [variable name]\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"[var | const] [variable name] = [variable value]\n")),(0,i.kt)("p",null,"The keyword is either ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"const"),". Var is for a mutable variable, and const is for immutable and constant. The variable name has to start with an alphabetical letter or an underscore, then can be any character. It cannot contain spaces. "),(0,i.kt)("p",null,"The value can be an expression, value, or even another variable. For example a number or a string. Without the value, the variable's value is automatically set to ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),". "),(0,i.kt)("p",null,"Something to keep in mind when using variables is the scope. A variable is only avaliable in the scope, and cannot be accessed outside it. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var a = 5\nif (a > 3) {\n    print(a)\n    var b = 12\n}\nprint(b) # Error\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"print(b)")," line will throw an error, because the variable b is only avaliable inside the if statement scope. "),(0,i.kt)("h3",{id:"constant-variable-immutability-in-more-detail"},"Constant variable immutability in more detail"),(0,i.kt)("p",null,"Here is an example of how a constant variable works:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const a = 5\nprint(a) # 5\n\nconst b = a * 2\nprint(b) # 10\n\na = 12 # This will error because 'a' is a constant variable\n")),(0,i.kt)("h3",{id:"assignment"},"Assignment"),(0,i.kt)("p",null,"Assignment is when you change a variable's value to something else. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var x = 10\nprint(x) # 10\nx = 15\nprint(x) # 15\n")),(0,i.kt)("p",null,"Because x is already defined in the scope, you can change the variable's value to something else. You can also reference the variable's value inside the assignment. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var a = 5\nprint(a) # 5\na = a * 2\nprint(a) # 10\n")),(0,i.kt)("p",null,"The assignment changes a's value to 10, because it is doubling the existing value."))}m.isMDXComponent=!0}}]);