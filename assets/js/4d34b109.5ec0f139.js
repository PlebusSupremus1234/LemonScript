"use strict";(self.webpackChunklemon_script_documentation=self.webpackChunklemon_script_documentation||[]).push([[7793],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),m=s(n),f=o,d=m["".concat(c,".").concat(f)]||m[f]||p[f]||a;return n?r.createElement(d,i(i({ref:t},l),{},{components:n})):r.createElement(d,i({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6122:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return l},default:function(){return m}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],u={},c="Functions",s={unversionedId:"documentation/functions",id:"documentation/functions",isDocsHomePage:!1,title:"Functions",description:"A function is a block of code that you can use multiple times to peform a particular task. The syntax is:",source:"@site/docs/documentation/functions.md",sourceDirName:"documentation",slug:"/documentation/functions",permalink:"/LemonScript/docs/documentation/functions",editUrl:"https://github.com/PlebusSupremus1234/LemonScript/docs/documentation/functions.md",version:"current",frontMatter:{},sidebar:"documentation",previous:{title:"Typeof Function",permalink:"/LemonScript/docs/documentation/inbuilt-functions/typeof"},next:{title:"Arrays",permalink:"/LemonScript/docs/documentation/arrays"}},l=[],p={toc:l};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"functions"},"Functions"),(0,a.kt)("p",null,"A function is a block of code that you can use multiple times to peform a particular task. The syntax is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"func [function name](<args>) {\n    [code]\n}\n")),(0,a.kt)("p",null,"The function name follows the same rules as a variable name. Next, are the arguments. These are optional, and are seperated with commas. The maximum amount of arguments for a function that you can have is 255. Here is an example of it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"func add(num1, num2) {\n    return num1 + num2\n}\n\nprint(add(1, 2))\nprint(add(14, 6.54))\nprint(add(123, -11))\n")),(0,a.kt)("p",null,"This is a basic function that takes 2 inputs, then returns the sum. Returning a value stops the fuction, and returns the value in the statement. This means that proceeding code after the statement will not execute. If there is no expression or no return statement, the function automatically returns ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),". "),(0,a.kt)("p",null,"You can also set optional arguments by adding a ",(0,a.kt)("inlineCode",{parentName:"p"},"?")," after the argument name, like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"func test(arg1, arg2?) {}\n")),(0,a.kt)("p",null,"If no arg2 argument is passed, the arg2 will be automatically assigned to ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),"."))}m.isMDXComponent=!0}}]);